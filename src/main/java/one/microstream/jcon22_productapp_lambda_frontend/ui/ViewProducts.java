
package one.microstream.jcon22_productapp_lambda_frontend.ui;

import java.util.Arrays;
import java.util.List;

import com.rapidclipse.framework.server.data.format.NumberFormatBuilder;
import com.rapidclipse.framework.server.data.renderer.RenderedComponent;
import com.rapidclipse.framework.server.ui.filter.FilterComponent;
import com.rapidclipse.framework.server.ui.filter.GridFilterSubjectFactory;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.GridVariant;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.data.renderer.NumberRenderer;
import com.vaadin.flow.router.Route;

import one.microstream.jcon22_productapp_lambda_frontend.HasTitle;
import one.microstream.jcon22_productapp_lambda_frontend.dao.DAOProducts;
import one.microstream.jcon22_productapp_lambda_frontend.domain.Product;
import one.microstream.jcon22_productapp_lambda_frontend.ui.gencols.GenColProductFunctions;


@Route(value = "", layout = MainLayout.class)
public class ViewProducts extends VerticalLayout implements HasTitle
{
	public ViewProducts()
	{
		super();
		this.initUI();
		
	}

	@Override
	public String getTitle()
	{
		return "Home";
	}

	/**
	 * Event handler delegate method for the {@link VerticalLayout}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void this_onAttach(final AttachEvent event)
	{
		this.refreshGrid();

	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.filterComponent = new FilterComponent();
		this.grid            = new Grid<>(Product.class, false);
		this.label           = new Label();

		this.grid.addThemeVariants(GridVariant.LUMO_ROW_STRIPES);
		this.grid.addColumn(Product::getUuid).setKey("uuid").setHeader("ID").setSortable(true).setAutoWidth(true)
			.setFlexGrow(0);
		this.grid.addColumn(Product::getName).setKey("name").setHeader("Name").setSortable(true);
		this.grid.addColumn(Product::getDescription).setKey("description").setHeader("Description").setSortable(true);
		this.grid.addColumn(Product::getCategoryId).setKey("categoryId").setHeader("CatID").setSortable(true)
			.setAutoWidth(true).setFlexGrow(0);
		this.grid.addColumn(new NumberRenderer<>(Product::getUnitPrice, NumberFormatBuilder.Currency().build(), ""))
			.setKey("unitPrice").setHeader("Price per unit").setSortable(true).setAutoWidth(true).setFlexGrow(0)
			.setTextAlign(ColumnTextAlign.END);
		this.grid.addColumn(new NumberRenderer<>(Product::getUnitWeight, NumberFormatBuilder.Decimal().build(), ""))
			.setKey("unitWeight").setHeader("Weight per unit").setSortable(true).setAutoWidth(true).setFlexGrow(0)
			.setTextAlign(ColumnTextAlign.END);
		this.grid.addColumn(new NumberRenderer<>(Product::getUnitsInStock, NumberFormatBuilder.Integer().build(), ""))
			.setKey("unitsInStock").setHeader("Units in stock").setSortable(true).setAutoWidth(true).setFlexGrow(0)
			.setTextAlign(ColumnTextAlign.END);
		this.grid.addColumn(RenderedComponent.Renderer(GenColProductFunctions::new)).setKey("renderer").setHeader("...")
			.setSortable(false).setAutoWidth(true).setFlexGrow(0).setTextAlign(ColumnTextAlign.CENTER);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		this.label.setText("Label");

		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.filterComponent
			.setFilterSubject(GridFilterSubjectFactory.CreateFilterSubject(this.grid,
				Arrays.asList("description", "name"),
				Arrays.asList("uuid", "name", "description", "categoryId", "unitPrice", "unitWeight", "unitsInStock")));

		this.filterComponent.setWidthFull();
		this.filterComponent.setHeight(null);
		this.grid.setSizeFull();
		this.label.setSizeUndefined();
		this.add(this.filterComponent, this.grid, this.label);
		this.setFlexGrow(1.0, this.grid);
		this.setSizeFull();

		this.addAttachListener(this::this_onAttach);
	} // </generated-code>

	// <generated-code name="variables">
	private Grid<Product>   grid;
	private Label           label;
	private FilterComponent filterComponent;
	// </generated-code>

	public void refreshGrid()
	{
		final List<Product> products = DAOProducts.listProducts();
		this.grid.setItems(products);// TODO Auto-generated method stub
		this.filterComponent.connectWith(this.grid);
		this.label.setText(products.size() + " Rows");
	}

}
